{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","searchBattleLocation","event","value","console","log","axios","get","then","response","data","setState","searchData","render","items","state","battles","className","Autocomplete","onChange","freeSolo","disableClearable","options","map","option","location","renderInput","params","TextField","label","variant","InputProps","type","battleDetail","key","_id","name","year","region","Grid","container","spacing","item","xs","sm","Paper","Chip","attacker_king","size","color","attacker_commander","attacker_1","Avatar","defender_king","defender_commander","defender_1","Component","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kYAkGeA,E,kDArFb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAgBRC,qBAAqB,SAACC,EAAMC,GAC1BC,QAAQC,IAAIF,GACZG,IAAMC,IAAI,wEAAwEJ,GACjFK,MAAK,SAAAC,GACJL,QAAQC,IAAII,EAASC,MACrB,EAAKC,SAAS,CACZC,WAAYH,EAASC,WAvBT,EA4BlBG,OAAS,WACP,IAAIC,EAAQ,EAAKC,MAAMC,QACvB,OACE,yBAAKC,UAAU,OACb,6DACA,kBAACC,EAAA,EAAD,CACAC,SAAU,EAAKlB,qBACfmB,UAAQ,EACRC,kBAAgB,EAChBC,QAASR,EAAMS,KAAI,SAACC,GAAD,OAAYA,EAAOC,YACtCC,YAAa,SAACC,GAAD,OACX,kBAACC,EAAA,EAAD,iBACMD,EADN,CAEEE,MAAM,eACNC,QAAQ,WACRC,WAAU,eAAOJ,EAAOI,WAAd,CAA0BC,KAAM,iBAI/C,EAAKjB,MAAMH,WAAWW,KAAI,SAAAU,GAAY,OACrC,yBAAKC,IAAKD,EAAaE,IAAKlB,UAAU,kBACpC,4BAAKgB,EAAaG,MACtB,wCAAcH,EAAaI,MAC3B,wCAAcJ,EAAaR,SAA3B,KAAuCQ,EAAaK,QACpD,yBAAKrB,UAAU,kBACf,kBAACsB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACzB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAACC,EAAA,EAAD,KACE,yBAAK5B,UAAU,sBACf,4BAAI,kBAAC6B,EAAA,EAAD,CAAMjB,MAAOI,EAAac,cAAejB,QAAQ,WAAWkB,KAAK,SAASC,MAAM,eAC1F,4CAAkBhB,EAAaiB,oBACzB,sCAAYjB,EAAakB,eAI7B,kBAACZ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACzB,kBAACQ,EAAA,EAAD,YAEA,kBAACb,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAACC,EAAA,EAAD,KACE,yBAAK5B,UAAU,sBACf,4BAAI,kBAAC6B,EAAA,EAAD,CAAMjB,MAAOI,EAAaoB,cAAevB,QAAQ,WAAWkB,KAAK,SAASC,MAAM,aAC1F,4CAAkBhB,EAAaqB,oBACzB,sCAAYrB,EAAasB,uBArEjC,EAAKxC,MAAM,CACTC,QAAS,GACTJ,WAAY,IAJE,E,gEAOE,IAAD,OACjBN,IAAMC,IAAI,gEACTC,MAAK,SAAAC,GACFL,QAAQC,IAAI,kBACZ,EAAKM,SAAS,CACZK,QAASP,EAASC,OAEpBN,QAAQC,IAAI,EAAKU,MAAMC,gB,GAhBbwC,aCCEC,QACW,cAA7BC,OAAOjC,SAASkC,UAEe,UAA7BD,OAAOjC,SAASkC,UAEhBD,OAAOjC,SAASkC,SAASC,MACvB,2DCZNC,IAAShD,OACP,kBAAC,IAAMiD,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3D,MAAK,SAAA4D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnE,QAAQmE,MAAMA,EAAMC,c","file":"static/js/main.f9766697.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Chip from '@material-ui/core/Chip';\nimport Avatar from '@material-ui/core/Avatar';\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n      battles: [],\n      searchData: []\n    }\n  }\n  componentDidMount(){\n    axios.get('https://got-battle-app-backend.herokuapp.com/got-api/battles')\n    .then(response=>{\n        console.log(\"Data recieved!\");\n        this.setState({\n          battles: response.data\n        })\n        console.log(this.state.battles);\n    })\n  }\n  searchBattleLocation=(event,value)=>{\n    console.log(value);\n    axios.get('https://got-battle-app-backend.herokuapp.com/got-api/search?location='+value)\n    .then(response=>{\n      console.log(response.data);\n      this.setState({\n        searchData: response.data\n      })\n    })\n  }\n\n  render = ()=>{\n    let items = this.state.battles;\n    return (\n      <div className=\"App\">\n        <h1 > Game of Thrones - Battle App</h1>\n        <Autocomplete\n        onChange={this.searchBattleLocation}\n        freeSolo\n        disableClearable\n        options={items.map((option) => option.location)}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Search input\"\n            variant=\"outlined\"\n            InputProps={{ ...params.InputProps, type: 'search' }}\n          />\n        )}\n      />\n      {this.state.searchData.map(battleDetail=>(\n        <div key={battleDetail._id} className=\"battle-wrapper\">\n          <h2>{battleDetail.name}</h2>\n      <p>Fought in {battleDetail.year}</p>\n      <p>Location: {battleDetail.location}, {battleDetail.region}</p>\n      <div className=\"grid_container\">\n      <Grid container spacing={2}>\n      <Grid item xs={12} sm={5}>\n          <Paper >\n            <div className=\"king-card attacker\">\n            <h3><Chip label={battleDetail.attacker_king} variant=\"outlined\" size=\"medium\" color=\"secondary\" /></h3>\n      <p>Commanded by: {battleDetail.attacker_commander}</p>\n            <p>Troops: {battleDetail.attacker_1}</p>\n            </div>\n            </Paper>\n        </Grid>\n        <Grid item xs={12} sm={2}>\n      <Avatar>VS</Avatar>\n        </Grid>\n      <Grid item xs={12} sm={5}>\n          <Paper >\n            <div className=\"king-card defender\">\n            <h3><Chip label={battleDetail.defender_king} variant=\"outlined\" size=\"medium\" color=\"primary\" /></h3>\n      <p>Commanded by: {battleDetail.defender_commander}</p>\n            <p>Troops: {battleDetail.defender_1}</p>\n            </div>\n            </Paper>\n        </Grid>\n        </Grid>\n        </div>\n          </div>\n      ))}\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}